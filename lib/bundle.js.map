{"version":3,"sources":["webpack:///webpack/bootstrap 7444c9af2f06b047bbdf","webpack:///./lib/rushhour.js","webpack:///./lib/game.js","webpack:///./lib/car.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACXD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,wBAAuB,OAAO;AAC9B,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,UAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;AC5WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AClGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7444c9af2f06b047bbdf\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game(canvasEl);\n  new GameView(game, ctx).start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/rushhour.js\n ** module id = 0\n ** module chunks = 0\n **/","const Car = require(\"./car\");\n\nclass Game {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.canvas.addEventListener(\"mousedown\", (e) => this.checkDown(e));\n        document.addEventListener(\"mousemove\", (e) => this.checkMove(e));\n        document.addEventListener(\"mouseup\", (e) => this.checkUp(e));\n        this.level = 0;\n        this.endGame = 5;\n        this.winButtons = document.getElementById(\"win\");\n        this.completeScreen = document.getElementById(\"complete\");\n        const resetButton = document.getElementById(\"reset\");\n        const resetButton2 = document.getElementById(\"resetlevel\");\n        const nextLevel = document.getElementById(\"nextlevel\");\n        const restartButton = document.getElementById(\"restart\");\n        resetButton.addEventListener(\"click\", () => this.resetBoard(this.level));\n        resetButton2.addEventListener(\"click\", () => this.resetBoard(this.level));\n        nextLevel.addEventListener(\"click\", () => this.setCars(++this.level));\n        restartButton.addEventListener(\"click\", () => {\n            this.level = 0;\n            this.resetBoard(this.level);\n            this.completeScreen.className = \"hidden\";\n        });\n        this.won = false;\n\n        this.cars = [];\n        this.currentCar = null;\n\n        this.setCars(this.level);\n\n\n    }\n\n    setCars(level) {\n        this.won = false;\n        this.winButtons.className = \"hidden\";\n        if (this.level < this.endGame) {\n            let newCars;\n            const yellowCar = document.getElementById(\"yellowCar\");\n            const redCar = document.getElementById(\"redCar\");\n            const purpleCar = document.getElementById(\"purpleCar\");\n            const orangeCar = document.getElementById(\"orangeCar\");\n            const blueCar = document.getElementById(\"blueCar\");\n            const greenCar = document.getElementById(\"greenCar\");\n            if (level === 0) newCars = [new Car({\n                id: 1,\n                pos: [5, 205],\n                len: 180,\n                height: 90,\n                game: this,\n                horizontal: true,\n                img: redCar\n            })];\n            else if (level === 1) newCars = [new Car({\n                    id: 1,\n                    pos: [5, 205],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: redCar\n                }),\n                new Car({\n                    id: 2,\n                    pos: [505, 105],\n                    len: 90,\n                    height: 180,\n                    game: this,\n                    horizontal: false,\n                    img: greenCar\n                })\n            ];\n            else if (level === 2) newCars = [new Car({\n                    id: 1,\n                    pos: [105, 205],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: redCar\n                }),\n                new Car({\n                    id: 2,\n                    pos: [5, 5],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: greenCar\n                }),\n                new Car({\n                    id: 3,\n                    pos: [405, 405],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: blueCar\n                }),\n                new Car({\n                    id: 4,\n                    pos: [205, 505],\n                    len: 270,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: greenCar\n                }),\n                new Car({\n                    id: 5,\n                    pos: [5, 105],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: purpleCar\n                }),\n                new Car({\n                    id: 6,\n                    pos: [305, 105],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: blueCar\n                }),\n                new Car({\n                    id: 7,\n                    pos: [505, 5],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: yellowCar\n                }),\n            ];\n            else if (level === 3) newCars = [new Car({\n                    id: 1,\n                    pos: [5, 205],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: redCar\n                }),\n                new Car({\n                    id: 2,\n                    pos: [305, 405],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: orangeCar\n                }),\n                new Car({\n                    id: 3,\n                    pos: [405, 205],\n                    len: 90,\n                    height: 180,\n                    game: this,\n                    horizontal: false,\n                    img: greenCar\n                }),\n                new Car({\n                    id: 4,\n                    pos: [305, 505],\n                    len: 270,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: blueCar\n                }),\n                new Car({\n                    id: 6,\n                    pos: [5, 305],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: purpleCar\n                }),\n                new Car({\n                    id: 7,\n                    pos: [305, 5],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: yellowCar\n                }),\n            ];\n            else if (level === 4) newCars = [new Car({\n                    id: 1,\n                    pos: [5, 205],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: redCar\n                }),\n                new Car({\n                    id: 2,\n                    pos: [205, 405],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: blueCar\n                }),\n                new Car({\n                    id: 3,\n                    pos: [205, 505],\n                    len: 180,\n                    height: 90,\n                    game: this,\n                    horizontal: true,\n                    img: purpleCar\n                }),\n                new Car({\n                    id: 4,\n                    pos: [405, 305],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: greenCar\n                }),\n                new Car({\n                    id: 5,\n                    pos: [505, 305],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: purpleCar\n                }),\n                new Car({\n                    id: 6,\n                    pos: [105, 405],\n                    len: 90,\n                    height: 180,\n                    game: this,\n                    horizontal: false,\n                    img: orangeCar\n                }),\n                new Car({\n                    id: 7,\n                    pos: [305, 5],\n                    len: 90,\n                    height: 270,\n                    game: this,\n                    horizontal: false,\n                    img: yellowCar\n                }),\n                new Car({\n                    id: 8,\n                    pos: [205, 105],\n                    len: 90,\n                    height: 180,\n                    game: this,\n                    horizontal: false,\n                    img: greenCar\n                }),\n            ];\n\n            this.cars = newCars;\n\n            this.mainCar = this.cars[0];\n        }\n    }\n\n    resetBoard(level) {\n        this.cars = [];\n        this.setCars(this.level);\n\n    }\n\n    checkDown(e) {\n\n        let clickX = e.pageX - this.canvas.offsetLeft;\n        let clickY = e.pageY - this.canvas.offsetTop;\n\n        this.cars.forEach((car) => {\n            if ((clickX >= car.pos[0] &&\n                    clickX <= car.pos[0] + car.len) &&\n                (clickY >= car.pos[1] &&\n                    clickY <= car.pos[1] + car.height)) {\n                this.currentCar = car;\n                this.currentCar.mousedown();\n            }\n        });\n    }\n\n    checkUp(e) {\n        if (this.currentCar) {\n            this.currentCar.mouseup();\n            this.currentCar = null;\n        }\n    }\n\n    checkMove(e) {\n      if (this.currentCar) this.currentCar.drag(e);\n    }\n\n    checkWin() {\n        if (this.mainCar && this.mainCar.pos[0] > 400) {\n            this.mainCar = null;\n            this.cars = [];\n            this.won = true;\n            return true;\n        }\n        return false;\n    }\n\n\n    draw(ctx) {\n        ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n        let idx = 0;\n\n        for (let i = 0; i < 6; i++) {\n            for (let j = 0; j < 6; j++) {\n                idx % 2 === 0 ? ctx.fillStyle = \"#adadad\" : ctx.fillStyle = \"#cecece\";\n                ctx.fillRect(100 * i, 100 * j, 100, 100);\n                idx++;\n            }\n            idx++;\n        }\n\n        ctx.fillStyle = \"#ff0000\";\n        ctx.fillRect(590, 200, 10, 100);\n\n        if (this.level === this.endGame) {\n            this.completeScreen.className = \"completescreen\";\n        } else if (this.won) {\n            this.winButtons.className = \"winscreen\";\n        } else {\n\n\n            //draw arrow\n            ctx.lineWidth = 5;\n            ctx.strokeStyle = '#000000';\n            ctx.beginPath();\n            ctx.moveTo(550, 230);\n            ctx.lineTo(570, 250);\n            ctx.lineTo(520, 250);\n            ctx.lineTo(565, 250);\n            ctx.moveTo(573, 250);\n            ctx.lineTo(550, 270);\n            ctx.stroke();\n\n\n            this.cars.forEach((car) => {\n                car.draw(ctx);\n            });\n            this.checkWin();\n        }\n    }\n\n}\n\nGame.DIM_X = 600;\nGame.DIM_Y = 600;\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","class Car {\n    constructor(options) {\n        this.id = options.id;\n        this.img = options.img;\n        this.pos = options.pos;\n        this.len = options.len;\n        this.height = options.height;\n        this.game = options.game;\n        this.horizontal = options.horizontal;\n        this.draggable = false;\n        this.oppPos = [this.pos[0] + this.len, this.pos[1] + this.height];\n\n        this.offsetTop = this.game.canvas.offsetTop;\n        this.offsetLeft = this.game.canvas.offsetLeft;\n\n    }\n\n    colliding(top, bot, left, right) {\n\n        const insideCoords = (topLeft, bottomRight) => {\n            return (\n                (left <= bottomRight[0] && //is the left of my car more left than the right of the other car\n                    right >= topLeft[0] && //is the right of my car more right than the left of the other car\n                    top <= bottomRight[1] && // is the top of my car higher than the bottom of the other car\n                    bot >= topLeft[1]) //is the bottom of my car lower than the top of the other car\n            );\n        };\n\n        let collide = false;\n        this.game.cars.forEach((car) => {\n            if (this.id != car.id && !collide) {\n                if (insideCoords(car.pos, car.oppPos)) {\n                    collide = car;\n                    return car;\n                }\n            }\n        });\n        return collide;\n    }\n\n    draw(ctx) {\n        if (this.horizontal) {\n            const canvas = this.game.canvas;\n            ctx.translate(canvas.width / 2, canvas.height / 2);\n            ctx.rotate(-Math.PI / 2);\n            ctx.drawImage(this.img, (-this.pos[1]) + 210, this.pos[0] - 300, this.height, this.len);\n            ctx.rotate(Math.PI / 2);\n            ctx.translate(-canvas.width / 2, -canvas.height / 2);\n        } else ctx.drawImage(this.img, this.pos[0], this.pos[1], this.len, this.height);\n    }\n\n    drag(e) {\n        if (this.draggable) {\n            let left = e.pageX - this.len / 2 - this.offsetLeft;\n            let right = e.pageX + this.len / 2 - this.offsetLeft;\n            let top = e.pageY - this.height / 2 - this.offsetTop;\n            let bot = e.pageY + this.height / 2 - this.offsetTop;\n\n            let coll = this.colliding(top, bot, left, right);\n\n            if (this.inBounds(e.pageX, e.pageY) && (this.mouseNearCar(e.pageX, e.pageY)) && !coll) {\n                if (this.horizontal) {\n                    this.pos[0] = left;\n                    this.oppPos[0] = this.pos[0] + this.len;\n                } else {\n                    this.pos[1] = top;\n                    this.oppPos[1] = this.pos[1] + this.height;\n                }\n            }\n        }\n    }\n\n    inBounds(x, y, lowX = this.offsetLeft, highX = 600 + this.offsetLeft, lowY = this.offsetTop, highY = 600 + this.offsetTop) {\n        return (\n            x - this.len / 2 >= lowX &&\n            x + this.len / 2 <= highX &&\n            y - this.height / 2 >= lowY &&\n            y + this.height / 2 <= highY\n        );\n    }\n    mouseNearCar(x, y) {\n        return (\n            this.pos[0] + this.offsetLeft - 170 < x &&\n            this.oppPos[0] + this.offsetLeft + 170 > x &&\n            this.pos[1] + this.offsetTop - 170 < y &&\n            this.oppPos[1] + this.offsetTop + 170 > y\n        );\n    }\n\n    mousedown() {\n        this.draggable = true;\n    }\n\n    mouseup() {\n        this.draggable = false;\n    }\n}\n\nmodule.exports = Car;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/car.js\n ** module id = 2\n ** module chunks = 0\n **/","class GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n  }\n\n  start() {\n    this.lastTime = 0;\n    //start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = (time - this.lastTime);\n    this.lastTime = time;\n    this.game.draw(this.ctx);\n\n    //every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}