{"version":3,"sources":["webpack:///webpack/bootstrap de8419a8b95ca9bd3b2b","webpack:///./lib/rushhour.js","webpack:///./lib/game.js","webpack:///./lib/car.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACXD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,8DAA6D;AAC7D;AACA,yEAAwE;AACxE,0BAAyB,2CAA2C;AACpE;AACA,wEAAuE;AACvE,0BAAyB;AACzB;;AAEA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;;;AAGA;AACA,8DAA6D;AAC7D;AACA,qEAAoE;AACpE,0BAAyB,2CAA2C;AACpE;AACA,qEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AChHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap de8419a8b95ca9bd3b2b\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game(canvasEl);\n  new GameView(game, ctx).start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/rushhour.js\n ** module id = 0\n ** module chunks = 0\n **/","const Car = require(\"./car\");\n\nclass Game {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.cars = [];\n        this.currentCar = null;\n        this.canvas.addEventListener(\"mousedown\", (e) => this.checkDown(e));\n        this.canvas.addEventListener(\"mousemove\", (e) => this.checkMove(e));\n        this.canvas.addEventListener(\"mouseup\", (e) => this.checkUp(e));\n        this.cars.push(new Car({\n            id: 1,\n            pos: [0, 300],\n            len: 180,\n            height: 90,\n            color: \"#acbbca\",\n            game: this,\n            orientation: \"horizontal\"\n        }));\n        this.cars.push(new Car({\n            id: 2,\n            pos: [300, 0],\n            len: 90,\n            height: 180,\n            color: \"#8723ef\",\n            game: this,\n            orientation: \"vertical\"\n        }));\n        this.cars.push(new Car({\n            id: 3,\n            pos: [500, 100],\n            len: 90,\n            height: 180,\n            color: \"#93acef\",\n            game: this,\n            orientation: \"vertical\"\n        }));\n\n        this.mainCar = this.cars[0];\n\n    }\n\n    checkDown(e) {\n        this.cars.forEach((car) => {\n            if ((e.pageX >= car.pos[0] + 8 &&\n                    e.pageX <= car.pos[0] + car.len + 8) &&\n                (e.pageY >= car.pos[1] + 8 &&\n                    e.pageY <= car.pos[1] + car.height + 8)) {\n                this.currentCar = car;\n                this.currentCar.mousedown();\n            }\n        });\n    }\n\n    checkUp(e) {\n        if (this.currentCar) {\n            this.currentCar.mouseup();\n            this.currentCar = null;\n        }\n    }\n\n    checkMove(e) {\n        if (this.currentCar) {\n            this.currentCar.drag(e);\n        }\n    }\n\n    won() {\n      return (this.mainCar.pos[0] > 400);\n    }\n\n\n    draw(ctx) {\n        ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n        ctx.fillStyle = Game.BG_COLOR;\n        ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n        this.cars.forEach((object) => {\n            object.draw(ctx);\n        });\n\n        if (this.won()) console.log(\"winrar\");\n    }\n\n}\n\nGame.BG_COLOR = \"#123456\";\nGame.DIM_X = 600;\nGame.DIM_Y = 600;\nGame.FPS = 60;\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","class Car {\n    constructor(options) {\n        this.id = options.id;\n        this.pos = options.pos;\n        this.len = options.len;\n        this.height = options.height;\n        this.color = options.color;\n        this.game = options.game;\n        this.orientation = options.orientation;\n        this.draggable = false;\n        this.oppPos = [this.pos[0] + this.len, this.pos[1] + this.height];\n\n        // this.prev = 0;\n    }\n\n    colliding(top, bot, left, right) {\n        const insideCoords = (topLeft, bottomRight) => {\n            return (\n                (left <= bottomRight[0] && //is the left of my car more left than the right of the other car\n                    right >= topLeft[0] && //is the right of my car more right than the left of the other car\n                    top <= bottomRight[1] && // is the top of my car higher than the bottom of the other car\n                    bot >= topLeft[1]) //is the bottom of my car lower than the top of the other car\n            );\n        };\n\n        let collide = false;\n        this.game.cars.forEach((car) => {\n            if (this.id != car.id && !collide) {\n                if (insideCoords(car.pos, car.oppPos)) {\n                    // console.log(\"colliding\");\n                    collide = car;\n                    return car;\n                }\n            }\n        });\n        return collide;\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.rect(this.pos[0], this.pos[1], this.len, this.height);\n        ctx.closePath();\n        ctx.fillStyle = this.color;\n        ctx.fill();\n    }\n\n    drag(e) {\n        if (this.draggable) {\n            let coll = this.colliding(this.pos[1], this.oppPos[1], this.pos[0], this.oppPos[0]);\n\n            if (this.inBounds(e.pageX, e.pageY)) {\n                if (this.orientation === \"horizontal\") {\n                    let left = e.pageX - this.len / 2;\n\n                    if (!coll) {\n                        console.log(left);\n                        this.pos[0] = left;\n                    } else {\n                        let collMid = (coll.pos[0] + coll.oppPos[0] / 2);\n                        if (this.oppPos[0] < collMid) this.pos[0] -= 10;\n                        else this.pos[0] += 10;\n                        if (coll.pos[0] === this.oppPos[0]) { // if we are hitting them from the left\n                            console.log(\"left side collision\");\n                            if (this.pos[0] >= left) this.pos[0] = left; // we can move left\n                        } else if (coll.oppPos[0] === this.pos[0]) { // if we are hitting them from the right\n                            console.log(\"right side collision\");\n                            if (this.pos[0] < left) this.pos[0] = left; // we can move right\n                        } else {\n                            console.log(\"collided\");\n\n                        }\n                    }\n\n                    this.oppPos[0] = this.pos[0] + this.len;\n                } else {\n                    let top = e.pageY - this.height / 2 - 8;\n                    if (!coll)(this.pos[1] > top ? this.pos[1] -= 5 : this.pos[1] += 5);\n\n\n                    else {\n                        if (coll.pos[1] === this.oppPos[1]) { // if we are hitting them from the top\n                            console.log(\"top side collision\");\n                            if (this.pos[1] > top) this.pos[1] -= 5; // we can move top\n                        } else if (coll.oppPos[1] === this.pos[1]) { // if we are hitting them from the bottom\n                            console.log(\"bottom side collision\");\n                            if (this.pos[1] < top) this.pos[1] += 5; // we can move down\n                        }\n                    }\n                    this.oppPos[1] = this.pos[1] + this.height;\n                }\n            }\n        }\n    }\n\n    inBounds(x, y, lowX = 8, highX = 608, lowY = 8, highY = 608) {\n        return (\n            x - this.len / 2 >= lowX &&\n            x + this.len / 2 <= highX &&\n            y - this.height / 2 >= lowY &&\n            y + this.height / 2 <= highY\n        );\n    }\n\n    mousedown() {\n        this.draggable = true;\n    }\n\n    mouseup() {\n        this.draggable = false;\n    }\n}\n\nmodule.exports = Car;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/car.js\n ** module id = 2\n ** module chunks = 0\n **/","class GameView {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n  }\n\n  start() {\n    this.lastTime = 0;\n    //start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = (time - this.lastTime);\n    this.lastTime = time;\n    this.game.draw(this.ctx);\n\n    //every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}